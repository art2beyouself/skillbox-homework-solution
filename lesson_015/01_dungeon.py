# -*- coding: utf-8 -*-

# Подземелье было выкопано ящеро-подобными монстрами рядом с аномальной рекой, постоянно выходящей из берегов.
# Из-за этого подземелье регулярно затапливается, монстры выживают, но не герои, рискнувшие спуститься к ним в поисках
# приключений.
# Почуяв безнаказанность, ящеры начали совершать набеги на ближайшие деревни. На защиту всех деревень не хватило
# солдат и вас, как известного в этих краях героя, наняли для их спасения.
#
# Карта подземелья представляет собой json-файл под названием rpg.json. Каждая локация в лабиринте описывается объектом,
# в котором находится единственный ключ с названием, соответствующем формату "Location_<N>_tm<T>",
# где N - это номер локации (целое число), а T (вещественное число) - это время,
# которое необходимо для перехода в эту локацию. Например, если игрок заходит в локацию "Location_8_tm30000",
# то он тратит на это 30000 секунд.
# По данному ключу находится список, который содержит в себе строки с описанием монстров а также другие локации.
# Описание монстра представляет собой строку в формате "Mob_exp<K>_tm<M>", где K (целое число) - это количество опыта,
# которое получает игрок, уничтожив данного монстра, а M (вещественное число) - это время,
# которое потратит игрок для уничтожения данного монстра.
# Например, уничтожив монстра "Boss_exp10_tm20", игрок потратит 20 секунд и получит 10 единиц опыта.
# Гарантируется, что в начале пути будет только две локации и не будет мобов
# (то есть в коренном json-объекте содержится список, содержащий только два json-объекта и ничего больше).
#
# На прохождение игры игроку дается 123456.0987654321 секунд.
# Цель игры: за отведенное время найти выход ("Hatch")
#
# По мере прохождения вглубь подземелья, оно начинает затапливаться, поэтому
# в каждую локацию можно попасть только один раз,
# и выйти из нее нельзя (то есть двигаться можно только вперед).
#
# Чтобы открыть люк ("Hatch") и выбраться через него на поверхность, нужно иметь не менее 280 очков опыта.
# Если до открытия люка время заканчивается - герой задыхается и умирает, воскрешаясь перед входом в подземелье,
# готовый к следующей попытке (игра начинается заново).
#
# Гарантируется, что искомый путь только один, и будьте аккуратны в рассчетах!
# При неправильном использовании библиотеки decimal человек, играющий с вашим скриптом рискует никогда не найти путь.
#
# Также, при каждом ходе игрока ваш скрипт должен запоминать следущую информацию:
# - текущую локацию
# - текущее количество опыта
# - текущие дату и время (для этого используйте библиотеку datetime)
# После успешного или неуспешного завершения игры вам необходимо записать
# всю собранную информацию в csv файл dungeon.csv.
# Названия столбцов для csv файла: current_location, current_experience, current_date
#
#
# Пример взаимодействия с игроком:
#
# Вы находитесь в Location_0_tm0
# У вас 0 опыта и осталось 123456.0987654321 секунд до наводнения
# Прошло времени: 00:00
#
# Внутри вы видите:
# — Вход в локацию: Location_1_tm1040
# — Вход в локацию: Location_2_tm123456
# Выберите действие:
# 1.Атаковать монстра
# 2.Перейти в другую локацию
# 3.Сдаться и выйти из игры
#
# Вы выбрали переход в локацию Location_2_tm1234567890
#
# Вы находитесь в Location_2_tm1234567890
# У вас 0 опыта и осталось 0.0987654321 секунд до наводнения
# Прошло времени: 20:00
#
# Внутри вы видите:
# — Монстра Mob_exp10_tm10
# — Вход в локацию: Location_3_tm55500
# — Вход в локацию: Location_4_tm66600
# Выберите действие:
# 1.Атаковать монстра
# 2.Перейти в другую локацию
# 3.Сдаться и выйти из игры
#
# Вы выбрали сражаться с монстром
#
# Вы находитесь в Location_2_tm0
# У вас 10 опыта и осталось -9.9012345679 секунд до наводнения
#
# Вы не успели открыть люк!!! НАВОДНЕНИЕ!!! Алярм!
#
# У вас темнеет в глазах... прощай, принцесса...
# Но что это?! Вы воскресли у входа в пещеру... Не зря матушка дала вам оберег :)
# Ну, на этот-то раз у вас все получится! Трепещите, монстры!
# Вы осторожно входите в пещеру... (текст умирания/воскрешения можно придумать свой ;)
#
# Вы находитесь в Location_0_tm0
# У вас 0 опыта и осталось 123456.0987654321 секунд до наводнения
# Прошло уже 0:00:00
# Внутри вы видите:
#  ...
#  ...
#
# и так далее...
import datetime
import json
import re
import time
from decimal import Decimal

remaining_time = '123456.0987654321'
# если изначально не писать число в виде строки - теряется точность!
field_names = ['current_location', 'current_experience', 'current_date']

patterns = {'location': r'\w{,8}_\w{0,2}_\w{,2}(\d.\d+)',
            'creature': r'\w{,4}_\w{3}\d{,3}_\w{,2}\d+',
            'hatch': r'\w{,5}_\w{,2}(\d.\d+)'}


def identify_way(way):
    for name, pattern in patterns.items():
        res = re.match(pattern, way)
        if res:
            return name


def get_exp(way):
    _, exp, _ = way.split('_')
    return str(exp).replace('exp', '')


def get_time(way):
    *_, time = way.split('_')
    return str(time).replace('tm', '')


def get_ways_names(ways):
    next_ways = []
    for way in ways:
        if isinstance(way, dict):
            for way in way.keys():
                next_ways.append(way)
        else:
            next_ways.append(way)
    return next_ways

# identify_way(text)
# exp = get_exp(text)
# time = get_time(text)
# print(exp, time)


def get_locations():
    for current_location, ways in rpg_map.items():
        way_names = get_ways_names(ways)

        return current_location, way_names


with open(file='rpg.json', mode='r') as f:
    rpg_map = json.load(f)

delta_time = 0
total_time = Decimal(remaining_time)


while True:
    begin_time = datetime.datetime.now()
    cur_loc, ways = get_locations()

    print(f'Вы находитесь в {cur_loc}')
    print(f'У вас 0 опыта и осталось {total_time} секунд до наводнения')
    print(f'Прошло времени: {delta_time}')

    print('Внутри Вы видите:')

    [print(f'- {way}') for way in ways]

    choice = input('Выберите действие:')

    end_time = datetime.datetime.now()
    delta_time = end_time - begin_time

    print(delta_time.seconds + (delta_time.microseconds / 1000000))

    total_time -= delta_time.seconds + Decimal(delta_time.microseconds/1000000)

    # for way_name in way_names:
    #
    #     identify = identify_way(way_name)
    #     print(way_name)
    #     if identify:
    #         if identify == 'creature':
    #             print(get_exp(way_name))
    #
    #         print(get_time(way_name))

# Учитывая время и опыт, не забывайте о точности вычислений!
